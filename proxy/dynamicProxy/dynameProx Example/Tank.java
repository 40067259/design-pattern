package dynamicProxy;

import java.lang.reflect.InvocationHandler;
import java.lang.reflect.Method;
import java.lang.reflect.Proxy;
import java.util.Random;

/**
 * @author Fred Zhang
 * @create 2020-03-22 1:18 PM
 */
/**
 * what if we want to proxy a random object ? For example: log and timeRecord
 * For the previous version, the type of Movable just can be proxy.
 * we don't know the class Type and don't know which methods need to proxy
 *
 * the dynamic proxy is introduced: the proxy class is generated by JVM not programmer
 * You can't see the codes of the proxy class
 */
public class Tank implements Movable{
    @Override
    public void inverse(int steps) {
        System.out.println("Tank is going back "+steps+(steps>1?" steps":" step"));
    }
    @Override
    public void move() {
        System.out.println("Tank is moving....");
        try{
            Thread.sleep(new Random().nextInt(10000));
        }
        catch(InterruptedException e){
            e.printStackTrace();
        }
    }



    public static void main(String[] args) {

        Movable tank = new Car();

        //System.getProperties().put("jdk.proxy.ProxyGenerator.saveGeneratedFiles","true");
        System.getProperties().put("sun.misc.ProxyGenerator.saveGeneratedFiles", "true");
        //Generate a class -->$Proxy0
        //Generate a proxy Object dynamic--->.newProxyInstance
        //Tank.class.getClassLoader() determine the ClassLoader
        //new Class[]{Movable.class} all methods which implement Movable interface
        //override the interface and call the Movable class' method ---->new InvocationHandler()
        //add additional information:System.out.println("Method "+method.getName()+" starts...");
        // System.out.println("Method "+method.getName()+" ends...");
        //return the method result--->return o;
        Movable m = (Movable) Proxy.newProxyInstance(Tank.class.getClassLoader(),
                new Class[]{Movable.class},
                new InvocationHandler() {
                    @Override
                    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
                      //proxy is 'this'==m
                        //method = move  method  = inverse
                        System.out.println("Method "+method.getName()+" starts...");
                        //System.out.println(proxy.getClass());
                        Object o = method.invoke(tank,args);//tank.move(), tank.inverse()
                        System.out.println("Method "+method.getName()+" ends...");

                        return o;
                    }
                });

        m.move();
        m.inverse(10);

    }
}
